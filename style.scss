.a {
  color: red;
  background: white;
}

*,
*::before,
*::after {
  list-style: none;
  box-sizing: border-box;
}

body {
  font-family: '微軟正黑體';
}

.container {
  width: 75%;
  padding-left: 15px;
  padding-right: 15px;
  margin: auto;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 20px 0 20px;
}

p {
  margin-bottom: 1rem;
}

section {
  margin-bottom: 2rem !important;
}

// css 原生變數，可以被編譯出去
:root {
  --primary: #007bff;
  --secondary: #6c757d;
  --success: #28a745;
  --info: #17a2b8;
  --warning: #ffc107;
  --danger: #dc3545;
}

/* Sass 變數，不會被編譯出去 */
$primary: #007bff;
$secondary: #6c757d;
$success: #28a745;
$info: #17a2b8;
$warning: #ffc107;
$danger: #dc3545;
$white: #fff;

$gradient: linear-gradient(0deg, rgb(0, 0, 50) 0%, rgb(0, 50, 200) 50%, rgb(0, 0, 255) 100%);
$border: 5px solid #fff;
$border-radius: 0.5rem;
$padding: 0.5rem 0.5rem;
$margin-bottom: 1rem;
$shadow: 0 0 5px rgba(0, 0, 0, 0.8);

h1 {
  background: $gradient;
  color: $white;
  border: $border;
  border-radius: $border-radius;
  padding: $padding;
  box-shadow: $shadow;
  margin-bottom: $margin-bottom;
}

/* 04. 流程控制 */
$number: 10;
// random 為 Sass 內建函式提供亂數功能，範例是 1-3 隨機
$number: random(3);
.mybox {
  width: 150px;
  height: 150px;
  display: flex;
  justify-content: center;
  align-items: center;
  /* @if ... @else if ... @else */
  @if ($number == 1) {
    background-color: red;
  } @else if $number == 2 {
    background-color: blue;
  } @else {
    background-color: green;
  }

  /* 字串分為引號、沒引號，判斷會通過 */
  @if (helloworld == 'helloworld') {
    box-shadow: 0 0 10px 15px rgba(0, 0, 0, 0.5);
  }

  /* 使用 and 兩運算式條件成立 */
  $stand: '石之自由';
  $master: '空条徐倫';
  @if ($stand== '石之自由' and $master == '空条徐倫') {
    color: yellow !important;
  } @else {
    color: white !important;
  }

  /* 使用 or 兩運算式以上其中之一成立，不能使用 || */
  $isHeight: '高';
  $isRich: '富';
  $isHandsome: '帥';
  @if ($isHeight == '高' or $isRich == '窮') {
    font-weight: bolder;
    font-size: 50px;
  }

  /* 使用 not 反轉運算式的結果 */
  $box-width: 50px;
  @if not($box-width == 100px) {
    border: 10px dashed yellow;
  }

  $mySpacing: 20px;
  /* 內建提供函式，類似三元運算子，一種函式，因此 if 沒有 @ */
  outline: if($mySpacing > 10px, 10px solid red, 10px solid black);
}

/* @for ... through */
// start => 1
// end => 3
// 包含 end
@for $i from 1 through 3 {
  .through-#{$i} {
    width: 50px * $i;
    height: 50px * $i;
    display: inline-block;
    background-color: #aaa;
  }
}

/* @for ... to */
// 不包含 end
@for $i from 1 to 3 {
  .to-#{$i} {
    width: 50px * $i;
    height: 50px * $i;
    display: inline-block;
    background-color: #aaa;
  }
}
/*  05. 巢狀(嵌套,nested) */
#section05 {
  p {
    border-bottom: 1px solid #000;
  }

  .menu {
    margin-top: 2rem;
    padding: 0;
    font-size: 0;
    li {
      display: inline-block;
      font-size: 1rem;
      width: 100px;
      text-align: center;

      a {
        display: block;
        background: black;
        color: white;
        text-decoration: none;
        padding: 0.5rem;
        // & 符號可以表示父層選擇器
        &:hover {
          color: yellow;
          background-color: darkorchid;
        }
      }
      & + li {
        border-left: 1px solid yellow;
      }
    }

    li + li {
      border-left: 1px solid #fff;
    }
  }
}

// &  與 clearfix
.clearfix {
  &::after {
    content: '';
    display: block;
    clear: both;
  }
}

/* BEM 巢狀寫法，配合 & */
// BEM=> block、elemnt、modifier

// 父結構 block
.sidebar {
  padding-left: 0;
  display: flex;
  // 子元素 __element
  &__item {
    color: yellow;
    padding: 1rem;
    border: 1px solid #333;
    text-decoration: none;
    background: black;
    // 子元素狀態 --modifier
    &--active {
      background: deeppink;
    }
    &:hover {
      background-color: deepskyblue;
    }
    & a {
      color: white;
      display: block;
      line-height: 32px;
      text-decoration: none;
    }
  }
}

/* 練習:三欄 */
#exercise {
  .row {
    display: flex;
    border: 1px solid #333;
  }

  .col {
    width: 31.333333%;
    margin: 1%;
    background: #fff;
    border: 1px solid #333;
    padding: 1rem;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    transition: 0.5s;
    &:hover {
      transform: translateY(-20px);
      // margin-bottom: 5rem;
    }
  }

  a {
    text-decoration: none;
    color: black;
    transition: 0.5s;
    &:hover {
      text-decoration: underline;
      color: green;
    }
  }
}

/* 06. 繼承 */
%extend {
  width: 50px;
  height: 50px;
  float: left;
}

#extend {
  margin-top: 1rem;
  overflow: auto;
}

.box1 {
  @extend %extend;
  background: red;
}

.box2 {
  @extend %extend;
  background: green;
}

.box3 {
  @extend %extend;
  background: blue;
}

/* 07.計算 */
.box4 {
  background: #000;

  /* 加法 */
  width: 50px + 50px;
  width: 50px + 50; // 有單位、無單位可以相加
  height: 50px + 50px;

  /* 減法 */
  width: 100px - 50px;
  width: 100 - 50px; // 有單位、無單位可以相減
  height: 100px - 50px;

  /* 乘法 */
  width: 50px * 2;
  // width: 50px * 2px; // oops 編譯掛了

  /* 除法 */
  // width: 100px / 2; // 會通過，但是結果 CSS 無法使用
  width: 100px / 2;

  /* 變數不需要括號 */
  $child: 500px;
  $mother: 10;
  height: calc($child / $mother);

  $child2: 10px;
  $mother2: 10px;
  line-height: calc($child2 / $mother2);

  /* 餘數 */
  margin-top: 20px % 100;

  $var1: 20px;
  $var2: 1vw;
}

/* 08. Functions(函式) */
@function randomFont() {
  $result: random(3);

  @if ($result == 1) {
    @return 20px;
  } @else if($result == 2) {
    @return 40px;
  } @else {
    @return 60px;
  }
}

// 傳參數
@function boxLength1($length, $base) {
  @return $length * $base * 1px;
}

// 指定預設值
@function boxLength2($length: 100, $base: 1) {
  @return $length * $base * 1px;
}

.funcbox {
  width: 300px;
  height: 300px;
  color: white;
  background: deeppink;
  font-size: randomFont();
  width: boxLength1(100, 2);
  height: boxLength2();
}

// px to rem
@function rem($px) {
  // unit() 為內建函式，判斷傳進來的參數是否有 'px'
  @if (unit($px) == 'px') {
    @return calc($px / 16px) * 1rem;
  } @else {
    @return calc($px / 16) * 1rem;
  }
}

.rem {
  font-size: rem(16px);
  padding: rem(48);
}

$baseFontSize: 14px;
$size: 2px;

@function fontSize($level: 1) {
  @if ($level < 0) {
    $level: 1;
  }
  // 四捨五入，內建函式
  @return round($baseFontSize + $size * $level);
}

$lineHeightLevel: 1.5;
@function lineHeight($fontSize) {
  // ceil 無條件進位，內建函式
  @return ceil($fontSize * $lineHeightLevel);
}

// 灰階
@function gray($level: 0%) {
  // 內建函式讓顏色變深，0%~100%
  @return darken(#fff, $level);
}

#section08 {
  .container {
    p {
      font-size: fontSize(2);
      line-height: lineHeight(fontSize(2));
      background: gray(10%);
    }
  }
}

/* 09.Mixins */
// 定義一個 mixin
@mixin mixinTry() {
  width: 100px;
  height: 100px;
  background: #333;
}

// 使用 include 呼叫 mixin
.mixinTry {
  @include mixinTry();
}

// 可以設定參數
@mixin box($width, $height, $bg, $border, $outline: 10px dashed pink) {
  // 產生樣式
  width: $width;
  height: $height;
  background: $bg;
  border: $border;
  outline: $outline;
}

@mixin flex($main, $cross) {
  display: flex;
  justify-content: $main;
  align-items: $cross;
}

// 參數沒有使用不能省略，要傳入 null
.boxflex {
  @include box(100px, 100px, null, 5px solid #333);
  @include flex(center, center);
}

.btn {
  display: inline-block;
  color: #fff;
  text-decoration: none;
  line-height: 1.5;
  padding: 0.3rem 0.75rem;
  margin: 0 0.2rem;
  border-radius: 0.25rem;
}

// 沒有參數，括號可以省略
@mixin box-shadow {
  box-shadow: 0 0 0.3rem 0.1rem rgba(0, 0, 0, 0.6);
}

@mixin btn-bg($bgcolor) {
  & {
    @include box-shadow();
    background-color: $bgcolor;
  }
  &:hover {
    @if ($bgcolor == #000) {
      background-color: lighten($bgcolor, 10%);
    } @else {
      background-color: darken($bgcolor, 10%);
    }
  }
}

.btn-primary {
  @include btn-bg(#007bff);
}

.btn-success {
  @include btn-bg(#28a745);
}

.btn-danger {
  @include btn-bg(#dc3545);
}

.btn-dark {
  @include btn-bg(#000);
}

/* 10.使用 mixin + @content 設計 RWD */
$breakpoint-sm: 576px;
$breakpoint-md: 768px;
$breakpoint-lg: 992px;
$breakpoint-xl: 1200px;
$breakpoint-xxl: 1400px;

@mixin sm {
  @media (min-width: $breakpoint-sm) {
    @content;
  }
}

@mixin md {
  @media (min-width: $breakpoint-md) {
    @content;
  }
}

@mixin lg {
  @media (min-width: $breakpoint-lg) {
    @content;
  }
}

@mixin xl {
  @media (min-width: $breakpoint-xl) {
    @content;
  }
}

@mixin xxl {
  @media (min-width: $breakpoint-xxl) {
    @content;
  }
}

/*
#news {
  // xs 的地方
  @include sm {
  }
  @include md {
  }
  @include lg {
  }
  @include xl {
  }
  @include xxl {
  }
}
*/

#section10 {
  .container {
    width: 100%;
  }

  .row {
    display: flex;
    flex-wrap: wrap;
  }

  .col {
    width: 100%;
    padding: 15px;
    border: 1px solid #333;
  }

  .col + .col {
    margin-top: 20px;
  }

  // sm
  @include sm {
    .container {
      width: 75%;
    }
    .col {
      width: 50%;
    }

    .col + .col {
      margin-top: 0;
    }
  }

  // md
  @include md {
    .col {
      width: 33.333333%;
    }
  }

  // lg
  @include lg {
    .col {
      width: 25%;
    }
  }

  // xl
  @include xl {
    .col {
      width: 20%;
    }
  }

  // xl
  @include xxl {
    .col {
      width: 10%;
    }
  }
}

/* list 列表，就像 JS 的陣列，索引從 1 開始，不是 0 */
// 他是一系列的項目值，可以透過 空格 或 逗號 加以分隔，裡面每個值稱為 item

$width_list: 100px, 200px, 300px;
$margin_list: 10px 20px 30px 40px;
$bgColor_list: red, green, blue;
$zindex_list: 1 2 3 4;
$border_list: 1px solid red, 1px solid blue, 1px solid green, 1px solid yellow;

/* nth(list, index) 取出 list 裡面的 item 值 */
.list {
  width: nth($width_list, 1);
  width: nth($width_list, 2);
  width: nth($width_list, 3);
  border: nth($border_list, 1);
  border: nth($border_list, 2);
  border: nth($border_list, 3);
}

/* index(list, item) 取出索引 */
.index {
  line-height: index($width_list, 100px);
  line-height: index($width_list, 200px);
  line-height: index($width_list, 300px);
  z-index: index($bgColor_list, red);
  z-index: index($bgColor_list, green);
  z-index: index($bgColor_list, blue);
}

/* length(list) 取出 list 的長度 */
.length {
  z-index: length($bgColor_list);
}

// 使用 for 來遍歷 list 的 item
@for $i from 1 through length($bgColor_list) {
  .bg-#{nth($bgColor_list, $i)} {
    background-color: nth($bgColor_list, $i);
  }
}

// 使用 @each 來遍歷 list 的 item
@each $item in $bgColor_list {
  .each-bg-#{$item} {
    background-color: $item;
  }
}

/* Map */
$map1: (
  primary: red,
  secondary: green,
  warning: blue
);

.nth-map {
  color: nth($map1, 1);
}

@each $key, $value in $map1 {
  .bg-#{$key} {
    background-color: $value;
  }
}

// map2
$map2: (
  size1: 100px,
  size2: 200px,
  seze3: 300px
);

.map-keys {
  color: map-keys($map2);
}

@each $key in map-keys($map2) {
  .#{$key} {
    color: red;
  }
}

// map3
$map3: (
  shadow1: 0 0 10px black,
  shadow2: 0 0 20px black,
  shadow3: 0 0 30px black
);

$i: 0;
@each $value in map-values($map3) {
  $i: $i + 1;
  .w#{$i} {
    box-shadow: $value;
  }
}

// map4 物件包物件
$map4: (
  default: (
    width: 100px,
    height: 100px
  ),
  box1: (
    width: 200px,
    height: 200px
  ),
  box3: (
    width: 300px,
    height: 300px
  )
);

@each $key, $value in $map4 {
  $width: map-get($value, width);
  $height: map-get($value, height);
  .btn-#{$key} {
    width: $width;
    height: $height;
  }
}
